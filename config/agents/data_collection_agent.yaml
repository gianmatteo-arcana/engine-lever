# Data Collection Agent Configuration
# ENGINE PRD Compliant - All behavior defined in YAML (PRD:46)

agent:
  id: "data_collection_agent"
  name: "Data Collection Agent"
  version: "1.0.0"
  role: "data_collection_specialist"
  
  # Agent mission - concise and focused for optimal LLM performance
  mission: |
    Gather business information through automated public records search before requesting
    user input. Validate data quality and provide intelligent defaults.
    
    Key outputs: validated business entities, compliance mappings, progressive disclosure forms.
    
  # A2A Protocol Configuration (ADDED FOR ISSUE #51)
  a2a:
    protocolVersion: "1.0.0"
    communicationMode: "async"
    messageFormats:
      - "json"
    routing:
      canReceiveFrom:
        - "orchestrator_agent"
        - "legal_compliance_agent"
      canSendTo:
        - "orchestrator_agent"
        - "communication_agent"
    messageHandling:
      bufferSize: 50
      timeoutMs: 20000
      retryEnabled: true
  
  # Agent capabilities card for discovery (PRD:187-191)
  agent_card:
    skills:
      - "Public records search (CA SOS, business registrations)"
      - "Business information validation and cross-referencing"
      - "Progressive user input collection with smart defaults"
      - "Entity type classification and compliance requirements"
    
    data_sources:
      - "California Secretary of State database"
      - "Business license registries"
      - "Federal EIN database"
      - "State tax registration records"
    
    output_formats:
      - "Validated business entity information"
      - "Compliance requirement mapping"
      - "Data collection audit trail"
      - "Progressive disclosure UI requests"

# Response schemas for LLM structured output (PRD:487-489)
schemas:
  output:
    type: "object"
    required: ["status", "contextUpdate"]
    properties:
      status:
        type: "string"
        enum: ["completed", "needs_input", "error", "delegated"]
      
      contextUpdate:
        type: "object"
        required: ["operation", "data", "reasoning"]
        properties:
          operation:
            type: "string"
            description: "What operation was performed"
          
          data:
            type: "object"
            description: "The collected or validated data"
          
          reasoning:
            type: "string"
            description: "Detailed explanation of data collection approach"
          
          confidence:
            type: "number"
            minimum: 0
            maximum: 1
            description: "Confidence level in collected data accuracy (0.0-1.0)"

# Available operations this agent can perform
operations:
  gather_business_info:
    description: "Collect comprehensive business entity information"
    parameters:
      businessName: 
        type: "string"
        required: false
        description: "Business name if available"
      
      source_priority:
        type: "array"
        default: ["ca_sos", "federal_ein", "user_input"]
        description: "Order of data source preference"

# Tools this agent can access (PRD:484-485)
tools:
  public_records:
    - "ca_sos_search"
    - "business_registry_lookup"
    - "federal_ein_verification"
  
  validation:
    - "entity_type_classifier"
    - "address_standardizer"
    - "compliance_requirements_mapper"

# Tool selection criteria and decision trees
tool_selection:
  decision_tree:
    business_lookup:
      primary_tools: ["ca_sos_search", "federal_ein_verification"]
      selection_criteria: |
        IF business_name AND california_entity THEN use ca_sos_search
        ELSE IF ein_provided THEN use federal_ein_verification
        ELSE IF business_name THEN use ca_sos_search
        ELSE request_user_input
      
      fallback_chain:
        - "Search primary business databases"
        - "Try fuzzy name matching"
        - "Request direct user input with smart defaults"
      
      confidence_thresholds:
        high_confidence: 0.9  # Accept data automatically
        medium_confidence: 0.7  # Request user verification
        low_confidence: 0.5  # Treat as partial match
    
    data_validation:
      primary_tools: ["entity_type_classifier", "address_standardizer"]
      selection_criteria: |
        IF entity_type_unclear THEN use entity_type_classifier
        ELSE IF address_needs_validation THEN use address_standardizer
        ELSE manual_validation
      
      fallback_chain:
        - "Automated validation with ML models"
        - "Cross-reference with multiple sources"
        - "Flag for manual review"

# Structured examples for few-shot learning
examples:
  successful_data_collection:
    request:
      operation: "gather_business_info"
      parameters:
        businessName: "TechCorp LLC"
        source_priority: ["ca_sos", "federal_ein", "user_input"]
    
    response:
      status: "completed"
      contextUpdate:
        operation: "business_info_collected"
        data:
          business:
            name: "TechCorp LLC"
            entityType: "LLC"
            jurisdiction: "California"
            formationDate: "2023-01-15"
            ein: "12-3456789"
            address:
              street: "123 Main St"
              city: "San Francisco"
              state: "CA"
              zip: "94105"
          source: "ca_sos_database"
          verified: true
        reasoning: "Found complete business information in California SOS database. Entity type LLC, formed 2023, active status. Address and EIN verified."
        confidence: 0.95
      confidence: 0.95
      fallback_strategy: "If SOS data incomplete, cross-reference with federal EIN lookup"

  needs_user_input:
    request:
      operation: "gather_business_info"
      parameters:
        businessName: "Small Business Inc"
    
    instructions: |
      MANDATORY REQUIREMENT: When you need user input, you MUST include BOTH:
      1. status: 'needs_input' 
      2. uiRequest object in contextUpdate.data.uiRequest
      
      This is a strict requirement - the system will reject responses that have 
      status='needs_input' without a corresponding uiRequest object.
      
      ```typescript
      // REQUIRED FORMAT - Both status AND uiRequest must be present:
      return {
        status: 'needs_input',
        contextUpdate: {
          operation: 'business_info_required',
          data: {
            search_results: [],
            attempted_sources: ["ca_sos", "federal_ein"], 
            missing_data: ["entityType", "formationDate", "jurisdiction"],
            uiRequest: {
              templateType: 'form',
              title: 'Business Information Required',
              priority: 'high',
              instructions: 'We couldn\'t find your business in public records. Please provide the following information:',
              fields: [
                {
                  name: 'legalBusinessName',
                  type: 'text',
                  required: true,
                  label: 'Legal Business Name',
                  placeholder: 'Exact name as registered with state'
                },
                {
                  name: 'entityType',
                  type: 'select',
                  required: true,
                  label: 'Entity Type',
                  options: ['LLC', 'Corporation', 'Partnership', 'Sole Proprietorship']
                },
                {
                  name: 'formationState',
                  type: 'select',
                  required: true,
                  label: 'State of Formation',
                  options: ['Alabama', 'Alaska', 'Arizona', 'California', 'Colorado', 'Connecticut', 'Delaware'],
                  defaultValue: 'California'
                }
              ],
              semanticData: {
                purpose: 'Complete business entity identification',
                category: 'business_profile',
                fallbackReason: 'public_records_search_failed'
              }
            }
          },
          reasoning: 'No matches found in public databases. Need direct user input for business information.',
          confidence: 0.8
        }
      };
      ```
      
      The system will automatically:
      1. Detect the uiRequest object in your response data
      2. Create a UI_REQUEST_CREATED event
      3. Surface the request in TaskContext.pendingUserInteractions
      4. Add a uiRequestId to your response data for reference

# Fallback patterns for graceful degradation
fallback_patterns:
  database_unavailable:
    strategy: "Use cached data and manual collection"
    actions:
      - "Check local business database cache"
      - "Proceed with user input collection"
      - "Flag for database retry later"
    
  partial_data_found:
    strategy: "Combine automated and manual collection"
    actions:
      - "Present found data for verification"
      - "Request only missing information"
      - "Provide intelligent defaults where possible"
    
  data_quality_issues:
    strategy: "Request verification and correction"
    actions:
      - "Highlight conflicting information"
      - "Request user to choose correct version"
      - "Document data quality concerns"